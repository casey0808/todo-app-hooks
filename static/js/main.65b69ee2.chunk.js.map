{"version":3,"sources":["hooks/useToggleState.js","hooks/useInputState.js","reducers/todo.reducer.js","hooks/useLocalStorageReducer.js","context/todos.context.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useToggle","initialVal","useState","state","setState","toggle","value","setValue","e","target","todoReducer","action","type","id","uuidv4","task","completed","filter","todo","map","newTask","useLocalStorageReducer","key","defaultVal","reducer","useReducer","val","JSON","parse","window","localStorage","getItem","String","err","dispatch","useEffect","setItem","stringify","defaultTodos","TodosContext","createContext","DispatchContext","TodosProvider","props","todos","Provider","children","EditTodoForm","toggleIsEditing","useInput","handleChange","reset","useContext","onSubmit","preventDefault","style","marginLeft","width","TextField","onChange","margin","label","fullWidth","autoFocus","memo","isEditing","Checkbox","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","length","Paper","List","i","ListItem","height","Divider","TodoForm","useInputState","padding","TodoApp","backgroudColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAUeA,MARf,WAAwC,IAArBC,EAAoB,0DACTC,mBAASD,GADA,mBAC5BE,EAD4B,KACrBC,EADqB,KAE7BC,EAAS,WACXD,GAAUD,IAEd,MAAO,CAACA,EAAOE,ICLJ,WAAAJ,GAAe,IAAD,EACCC,mBAASD,GADV,mBAClBK,EADkB,KACXC,EADW,KAQzB,MAAO,CAACD,EANa,SAAAE,GACjBD,EAASC,EAAEC,OAAOH,QAER,WACVC,EAAS,O,yBCaFG,EAnBK,SAACP,EAAOQ,GACxB,OAAOA,EAAOC,MACV,IAAK,MACD,MAAM,GAAN,mBAAWT,GAAX,CAAkB,CAACU,GAAIC,cAAUC,KAAMJ,EAAOI,KAAMC,WAAW,KACnE,IAAK,SACD,OAAOb,EAAMc,QAAO,SAAAC,GAAI,OAAIA,EAAKL,KAAOF,EAAOE,MACnD,IAAK,SACD,OAAOV,EAAMgB,KAAI,SAAAD,GAAI,OACjBA,EAAKL,KAAOF,EAAOE,GAAnB,eAA4BK,EAA5B,CAAkCF,WAAYE,EAAKF,YAAaE,KAExE,IAAK,OACD,OAAOf,EAAMgB,KAAI,SAAAD,GAAI,OACjBA,EAAKL,KAAOF,EAAOE,GAAnB,eAA4BK,EAA5B,CAAkCH,KAAMJ,EAAOS,UAAWF,KAElE,QACI,OAAOf,ICIJkB,MAnBf,SAAgCC,EAAKC,EAAYC,GAAU,IAAD,EAC5BC,qBAAWD,EAASD,GAAY,WACtD,IAAIG,EACJ,IACIA,EAAMC,KAAKC,MACPC,OAAOC,aAAaC,QAAQT,IAAQU,OAAOT,IAEjD,MAAOU,GACLP,EAAMH,EAEV,OAAOG,KAV2C,mBAC/CvB,EAD+C,KACxC+B,EADwC,KAgBtD,OAJAC,qBAAU,WACNN,OAAOC,aAAaM,QAAQd,EAAKK,KAAKU,UAAUlC,MACjD,CAACmB,EAAKnB,IAEF,CAACA,EAAO+B,ICdbI,EAAe,CACjB,CAACzB,GAAI,EAAGE,KAAM,MAAOC,WAAW,GAChC,CAACH,GAAI,EAAGE,KAAM,iBAAkBC,WAAW,GAC3C,CAACH,GAAI,EAAGE,KAAM,QAASC,WAAW,IAGzBuB,EAAeC,0BACfC,EAAkBD,0BAExB,SAASE,EAAcC,GAAQ,IAAD,EACPtB,EAAuB,QAASiB,EAAc5B,GADvC,mBAC1BkC,EAD0B,KACnBV,EADmB,KAEjC,OACI,kBAACK,EAAaM,SAAd,CAAuBvC,MAAQsC,GAC3B,kBAACH,EAAgBI,SAAjB,CAA0BvC,MAAQ4B,GAC7BS,EAAMG,W,aCaRC,MAzBf,YAAsD,IAA9BlC,EAA6B,EAA7BA,GAAIE,EAAyB,EAAzBA,KAAMiC,EAAmB,EAAnBA,gBAAmB,EACZC,EAASlC,GADG,mBAC1CT,EAD0C,KACnC4C,EADmC,KACrBC,EADqB,KAE3CjB,EAAWkB,qBAAWX,GAC5B,OACQ,0BACIY,SAAU,SAAA7C,GACNA,EAAE8C,iBACFpB,EAAS,CAACtB,KAAM,OAAQC,GAAIA,EAAIO,QAASd,IACzC6C,IACAH,KAEJO,MAAO,CAAEC,WAAY,OAAQC,MAAO,QAEpC,kBAACC,EAAA,EAAD,CACIC,SAAUT,EACV5C,MAAOA,EACPsD,OAAO,SACPC,MAAM,YACNC,WAAS,EACTC,WAAS,M,sECUdC,sBAxBf,YAAwC,IAAxBnD,EAAuB,EAAvBA,GAAIE,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UAChBkB,EAAYkB,qBAAWX,GADM,EAEEzC,GAAU,GAFZ,mBAE5BiE,EAF4B,KAEjBjB,EAFiB,KAGnC,OACI,oCACKiB,EAAY,kBAAC,EAAD,CAAclD,KAAMA,EAAMiC,gBAAiBA,EAAiBnC,GAAIA,IAC7E,oCACI,kBAACqD,EAAA,EAAD,CAAUC,UAAW,EAAGC,QAASpD,EAAWqD,QAAS,kBAAMnC,EAAS,CAACtB,KAAM,SAAUC,GAAIA,OACzF,kBAACyD,EAAA,EAAD,CAAcf,MAAO,CAAEgB,eAAgBvD,EAAW,eAAe,SAC5DD,GAEL,kBAACyD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,aAAW,SAASL,QAAS,kBAAMnC,EAAS,CAACtB,KAAM,SAAUC,GAAIA,MACzE,kBAAC,IAAD,OAEJ,kBAAC4D,EAAA,EAAD,CAAYC,aAAW,OAAOL,QAASrB,GACnC,kBAAC,IAAD,a,mCCjBT,SAAS2B,IACpB,IAAM/B,EAAQQ,qBAAWb,GACzB,OAAGK,EAAMgC,OAED,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACKlC,EAAMzB,KAAI,SAACD,EAAM6D,GAAP,OACP,kBAACC,EAAA,EAAD,CAAUzB,MAAO,CAAE0B,OAAQ,QAAU3D,IAAKJ,EAAKL,IAC3C,kBAAC,EAAD,CAAMA,GAAIK,EAAKL,GAAIE,KAAMG,EAAKH,KAAMC,UAAWE,EAAKF,YACnD+D,EAAKnC,EAAMgC,OAAS,GAAM,kBAACM,EAAA,EAAD,YAO5C,KCCIC,MArBf,WAAqB,IAAD,EACqBC,EAAc,IADnC,mBACT9E,EADS,KACF4C,EADE,KACYC,EADZ,KAEVjB,EAAWkB,qBAAWX,GAC5B,OACI,kBAACoC,EAAA,EAAD,CAAOtB,MAAO,CAAEK,OAAQ,SAAUyB,QAAS,WACvC,0BAAMhC,SAAU,SAAA7C,GACZA,EAAE8C,iBACFpB,EAAS,CAACtB,KAAM,MAAOG,KAAMT,IAC7B6C,MAEA,kBAACO,EAAA,EAAD,CACIC,SAAUT,EACV5C,MAAOA,EACPsD,OAAO,SACPC,MAAM,oB,mCCoBXyB,MA9Bf,WAII,OACI,kBAACT,EAAA,EAAD,CACItB,MAAO,CACH8B,QAAS,EACTzB,OAAQ,EACRqB,OAAQ,QACRM,eAAgB,WAEpBC,UAAW,GACX,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAS,SAASpC,MAAO,CAAE0B,OAAQ,SACvD,kBAACW,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYH,MAAM,WAAlB,sBAGR,kBAACI,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASzC,MAAO,CAAC0C,UAAW,SAChD,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,kBAAC3D,EAAD,KACI,kBAAC,EAAD,MACA,kBAACiC,EAAD,WCpBT2B,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7B3E,OAAO4E,SAASC,UAEe,UAA7B7E,OAAO4E,SAASC,UAEhB7E,OAAO4E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65b69ee2.chunk.js","sourcesContent":["import { useState } from 'react';\n\nfunction useToggle(initialVal = false) {\n    const [state, setState] = useState(initialVal);\n    const toggle = () => {\n        setState(!state);\n    };\n    return [state, toggle];\n}\n\nexport default useToggle;\n","import { useState } from 'react';\n\nexport default initialVal => {\n    const [value, setValue] = useState(initialVal);\n    const handleChange = e => {\n        setValue(e.target.value);\n    }\n    const reset = () => {\n        setValue('');\n    }\n    return [value, handleChange, reset];\n};","import { v4 as uuidv4 } from 'uuid';\n\nconst todoReducer = (state, action) => {\n    switch(action.type) {\n        case \"ADD\":\n            return [...state, {id: uuidv4(), task: action.task, completed: false}]\n        case \"REMOVE\":\n            return state.filter(todo => todo.id !== action.id)\n        case \"TOGGLE\":\n            return state.map(todo => (\n                todo.id === action.id ? {...todo, completed: !todo.completed} : todo\n            ))\n        case \"EDIT\":\n            return state.map(todo => (\n                todo.id === action.id ? {...todo, task: action.newTask} : todo\n            ))\n        default:\n            return state\n    }\n}\n\nexport default todoReducer;","import { useReducer, useEffect } from 'react';\n\nfunction useLocalStorageReducer(key, defaultVal, reducer) {\n    const [state, dispatch] = useReducer(reducer, defaultVal, () => {\n        let val;\n        try {\n            val = JSON.parse(\n                window.localStorage.getItem(key) || String(defaultVal)\n            );\n        } catch (err) {\n            val = defaultVal;\n        }\n        return val;\n    })\n    useEffect(() => {\n        window.localStorage.setItem(key, JSON.stringify(state));\n    }, [key, state]);\n\n    return [state, dispatch];\n}\n\nexport default useLocalStorageReducer;\n","import React, { createContext } from 'react';\nimport todoReducer from '../reducers/todo.reducer';\nimport useLocalStorageReducer from '../hooks/useLocalStorageReducer';\n\nconst defaultTodos = [\n    {id: 1, task: \"Jog\", completed: false},\n    {id: 2, task: \"Clean the room\", completed: false},\n    {id: 3, task: \"Study\", completed: true}\n];\n\nexport const TodosContext = createContext();\nexport const DispatchContext = createContext();\n\nexport function TodosProvider(props) {\n    const [todos, dispatch] = useLocalStorageReducer(\"todos\", defaultTodos, todoReducer);\n    return (\n        <TodosContext.Provider value={ todos }>\n            <DispatchContext.Provider value={ dispatch }>\n                {props.children}    \n            </DispatchContext.Provider>\n        </TodosContext.Provider>\n    )\n}","import React, { useContext } from 'react';\nimport useInput from './hooks/useInputState';\nimport { DispatchContext } from './context/todos.context';\nimport TextField from '@material-ui/core/TextField';\n\n\nfunction EditTodoForm({ id, task, toggleIsEditing }) {\n    const [value, handleChange, reset] = useInput(task);\n    const dispatch = useContext(DispatchContext);\n    return (\n            <form \n                onSubmit={e => {\n                    e.preventDefault();\n                    dispatch({type: \"EDIT\", id: id, newTask: value})\n                    reset();\n                    toggleIsEditing();\n                }}\n                style={{ marginLeft: '1rem', width: '50%'}} \n            >\n                <TextField \n                    onChange={handleChange} \n                    value={value}\n                    margin='normal'\n                    label='Edit Todo' \n                    fullWidth\n                    autoFocus\n                />\n            </form>\n    )\n}\n\nexport default EditTodoForm;\n","import React, { useContext, memo } from 'react';\nimport useToggle from './hooks/useToggleState';\nimport EditTodoForm from './EditTodoForm';\nimport { DispatchContext } from './context/todos.context';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nfunction Todo({ id, task, completed }) {\n    const dispatch  = useContext(DispatchContext);\n    const [isEditing, toggleIsEditing] = useToggle(false);\n    return (\n        <>\n            {isEditing ? <EditTodoForm task={task} toggleIsEditing={toggleIsEditing} id={id} /> : \n            <>\n                <Checkbox tabIndex={-1} checked={completed} onClick={() => dispatch({type: \"TOGGLE\", id: id})} />\n                <ListItemText style={{ textDecoration: completed? 'line-through':'none' }}>\n                    {task}\n                </ListItemText>\n                <ListItemSecondaryAction>\n                    <IconButton aria-label='Delete' onClick={() => dispatch({type: \"REMOVE\", id: id})}>\n                        <DeleteIcon />\n                    </IconButton>\n                    <IconButton aria-label='Edit' onClick={toggleIsEditing}>\n                        <EditIcon />\n                    </IconButton>\n                </ListItemSecondaryAction>\n            </>}\n        </>\n    )\n}\n\nexport default memo(Todo);\n","import React, { useContext } from 'react';\nimport Todo from './Todo';\nimport { TodosContext } from './context/todos.context';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\n\n\n\nexport default function TodoList() {\n    const todos = useContext(TodosContext);\n    if(todos.length) {\n        return (\n            <Paper>\n                <List>\n                    {todos.map((todo, i) => (\n                        <ListItem style={{ height: '64px' }} key={todo.id}>\n                            <Todo id={todo.id} task={todo.task} completed={todo.completed} />\n                            {i < (todos.length - 1) && <Divider />}\n                        </ListItem>\n                    ))}\n                </List>\n            </Paper>\n        )\n    }\n    return null;\n}\n","import React, { useContext } from 'react';\nimport useInputState from './hooks/useInputState';\nimport { DispatchContext } from './context/todos.context';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\n\nfunction TodoForm() {\n    const [value, handleChange, reset] = useInputState('');\n    const dispatch = useContext(DispatchContext);\n    return (\n        <Paper style={{ margin: '1rem 0', padding: '0 1rem'}}>\n            <form onSubmit={e => {\n                e.preventDefault();\n                dispatch({type: \"ADD\", task: value})\n                reset();\n            }}>\n                <TextField \n                    onChange={handleChange} \n                    value={value}\n                    margin='normal'\n                    label='Add New Todo' \n                />\n            </form>\n        </Paper>\n    )\n}\n\nexport default TodoForm;\n","import React from 'react';\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid';\nimport { TodosProvider } from './context/todos.context';\n\nfunction TodoApp() {\n\n    // const [todos, setTodos] = useLocalStorage(\"todos\", initialTodos);\n    \n    return (\n        <Paper \n            style={{\n                padding: 0,\n                margin: 0,\n                height: \"100vh\",\n                backgroudColor: \"#fafafa\"\n            }}\n            elevation={0}>\n            <AppBar color='primary' position='static' style={{ height: '64px' }}>\n                <Toolbar>\n                    <Typography color='inherit'>Todos with Hooks</Typography>\n                </Toolbar>\n            </AppBar>\n            <Grid container justify='center' style={{marginTop: '1rem'}}>\n                <Grid item xs={11} md={8} lg={4}>\n                    <TodosProvider>\n                        <TodoForm />\n                        <TodoList />\n                    </TodosProvider>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\nexport default TodoApp;","import React from 'react';\nimport './App.css';\nimport TodoApp from './TodoApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}